name: Update Chocolatey Package

on:
  schedule:
    - cron: '0 */12 * * *'  # Run every 12 hours
  workflow_dispatch:  # Allow manual triggers

env:
  CHOCO_API_KEY: ${{ secrets.CHOCO_API_KEY }}
  SOURCE_REPO: "Microsoft/perfview"
  PACKAGE_ID: "perfview"

jobs:
  update-package:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Check Latest GitHub Release
        id: check_release
        uses: actions/github-script@v6
        with:
          script: |
            const release = await github.rest.repos.getLatestRelease({
              owner: '${{ env.SOURCE_REPO }}'.split('/')[0],
              repo: '${{ env.SOURCE_REPO }}'.split('/')[1]
            });
            
            const version = release.data.tag_name.replace('v', '');
            console.log(`Latest GitHub release version: ${version}`);
            
            // Find PerfView.exe asset
            const perfViewAsset = release.data.assets.find(asset => 
              asset.name.toLowerCase() === 'perfview.exe'
            );
            
            if (!perfViewAsset) {
              core.setFailed('PerfView.exe not found in release assets');
              return;
            }

            console.log(`Found PerfView.exe: ${perfViewAsset.browser_download_url}`);
            
            core.setOutput('version', version);
            core.setOutput('download_url', perfViewAsset.browser_download_url);
            core.setOutput('release_notes', release.data.body);
            
            // Log asset information for debugging
            console.log('Available assets:');
            release.data.assets.forEach(asset => {
              console.log(`- ${asset.name}: ${asset.browser_download_url}`);
            });

      - name: Get Current Chocolatey Version
        id: current_version
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'

          function Get-CurrentChocoPackageVersion {
              param([string]$package_id)

              try {
                  # Run choco search with --exact to get precise package match
                  $search_output = choco search $package_id --exact --limit-output | Where-Object { $_ -match $package_id }
                  
                  # If no results found, return $null
                  if (-not $search_output) {
                      return $null
                  }

                  # Parse version from the output
                  # Format is typically: package|version
                  if ($search_output -match '\|') {
                      # Handle limit-output format
                      $version = ($search_output -split '\|')[1]
                  } else {
                      # Handle standard output format
                      # Example: "Chromium v119.0.6045.124 [Approved]"
                      if ($search_output -match '\sv([\d\.]+)') {
                          $version = $matches[1]
                      } else {
                          return $null
                      }
                  }

                  # Clean and validate version
                  $version = $version.Trim()
                  if ([string]::IsNullOrWhiteSpace($version)) {
                      return $null
                  }

                  return $version
              } catch {
                  Write-Error "Error checking current version for package '$package_id': $_"
                  return $null
              }
          }
          
          try {
              # Get package version from nuspec file
              $nuspecContent = Get-Content "./automatic/perfview/perfview.nuspec" -Raw
              $nuspecVersion = ([regex]'<version>(.+?)</version>').Matches($nuspecContent)[0].Groups[1].Value
              Write-Host "Nuspec version: $nuspecVersion"

              # Get version from previous step (check_release)
              $releaseVersion = "${{ steps.check_release.outputs.version }}"
              Write-Host "Release version: $releaseVersion"

              if ($nuspecVersion -eq $releaseVersion) {
                  Write-Host "Nuspec version matches release version. Using nuspec version."
                  echo "CURRENT_VERSION=$nuspecVersion" >> $env:GITHUB_OUTPUT
                  exit 0
              }

              # Get package info from Chocolatey API
              $packageRemoteVersion = Get-CurrentChocoPackageVersion "PerfView" 
              Write-Host "Package remote version: $packageRemoteVersion"
              
              if ($packageRemoteVersion) {
                  Write-Host "Current Chocolatey version: $packageRemoteVersion"
                  echo "CURRENT_VERSION=$packageRemoteVersion" >> $env:GITHUB_OUTPUT
              } else {
                  Write-Error "No existing package found - failing"
                  exit 1
              }
          }
          catch {
              Write-Error "Failed to get current version: $_"
              exit 1
          }

      - name: Download Latest Release
        if: steps.current_version.outputs.CURRENT_VERSION != steps.check_release.outputs.version
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          
          # Create download directory
          New-Item -ItemType Directory -Path "./download" -Force
          
          # Download file
          $downloadUrl = "${{ steps.check_release.outputs.download_url }}"
          $fileName = Split-Path -Path $downloadUrl -Leaf
          $outputPath = "./download/$fileName"
          
          Write-Host "Downloading from: $downloadUrl"
          Invoke-WebRequest -Uri $downloadUrl -OutFile $outputPath
          
          # Calculate SHA256
          $hash = Get-FileHash -Path $outputPath -Algorithm SHA256
          echo "CHECKSUM=$($hash.Hash.ToLower())" >> $env:GITHUB_ENV
          echo "FILE_NAME=$fileName" >> $env:GITHUB_ENV

      - name: Update Package Files
        if: steps.current_version.outputs.CURRENT_VERSION != steps.check_release.outputs.version
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          
          # Update nuspec
          $nuspecPath = "./automatic/perfview/perfview.nuspec"
          [xml]$nuspec = Get-Content $nuspecPath
          $nuspec.package.metadata.version = "${{ steps.check_release.outputs.version }}"
          $nuspec.Save($nuspecPath)
          
          # Update chocolateyinstall.ps1
          $installScriptPath = "./automatic/perfview/tools/chocolateyinstall.ps1"
          $installScript = Get-Content $installScriptPath -Raw
          $installScript = $installScript -replace 'url\s*=\s*[''"].+?[''"]', "url = '${{ steps.check_release.outputs.download_url }}'"
          $installScript = $installScript -replace 'checksum\s*=\s*[''"].+?[''"]', "checksum = '$env:CHECKSUM'"
          Set-Content -Path $installScriptPath -Value $installScript

      - name: Pack and Push to Chocolatey
        if: steps.current_version.outputs.CURRENT_VERSION != steps.check_release.outputs.version
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          
          # Pack the package
          choco pack ./automatic/perfview/perfview.nuspec
          
          # Test install the package locally
          choco install $env:PACKAGE_ID -s .\ -y --force
          
          if ($LASTEXITCODE -ne 0) {
              Write-Error "Package installation test failed"
              exit 1
          }
          
          # Push to Chocolatey
          choco push -s https://push.chocolatey.org/ -k $env:CHOCO_API_KEY
          
          if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to push package to Chocolatey"
              exit 1
          }

      - name: Create Pull Request
        if: steps.current_version.outputs.CURRENT_VERSION != steps.check_release.outputs.version
        uses: peter-evans/create-pull-request@v5
        with:
          title: 'Update PerfView to version ${{ steps.check_release.outputs.version }}'
          commit-message: 'update PerfView to version ${{ steps.check_release.outputs.version }}'
          branch: 'update-package'
          base: 'master'
          body: |
            Automated package update to version ${{ steps.check_release.outputs.version }}
            
            Changes:
            - Updated package version from ${{ steps.current_version.outputs.CURRENT_VERSION }} to ${{ steps.check_release.outputs.version }}
            - Updated download URL to latest release
            - Updated checksum
            
            Release Notes:
            ${{ steps.check_release.outputs.release_notes }}

      - name: Upload Build Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: package-artifacts
          path: |
            *.nupkg